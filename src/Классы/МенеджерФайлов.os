// BSLLS:LatinAndCyrillicSymbolInWord-off

Перем _Поделка;  // само приложение
Перем _Настройки;

Перем _ФайлыDocx;    // массив желудей с обрабатываемыми файлами
Перем _НастройкиПодстановки; // массив с настройками для замены в шаблонах

&Желудь
Процедура ПриСозданииОбъекта(
		&Пластилин Поделка,
		&Пластилин Настройки
	)
	_Настройки = Настройки;
	_Поделка = Поделка;
	_ФайлыDocx = Новый Массив;
КонецПроцедуры

Процедура СоздатьЗаготовкиФайловИзШаблонов() Экспорт

	РаспакованныеШаблоны = Новый СписокЗначений();
	ОтсутствующиеШаблоны = Новый Массив();
	НеизвестныеТипыФайлов = Новый Массив();

	Для каждого Настройка Из _НастройкиПодстановки Цикл
		
		ИмяФайлаШаблона = Настройка.Получить("ИмяФайлаШаблона");
		ИмяВыходногоФайла = Настройка.Получить("ИмяВыходногоФайла");
		Если РаспакованныеШаблоны.НайтиПоЗначению(ИмяФайлаШаблона) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПутьРаспакованный  = ОбъединитьПути(ТекущийКаталог(), _Настройки.КаталогВременныхФайлов(), ИмяФайлаШаблона);
		ПутьКФайлуШаблона = ОбъединитьПути(ТекущийКаталог(), _Настройки.КаталогШаблонов(), ИмяФайлаШаблона);
		НайденныеФайлы = НайтиФайлы(ПутьКФайлуШаблона);
		Если НайденныеФайлы.Количество() = 0 Тогда
			ОтсутствующиеШаблоны.Добавить(ИмяФайлаШаблона);
			Продолжить;
		КонецЕсли;

		ТипФайла = "";
		Если СтрЗаканчиваетсяНа(ПутьКФайлуШаблона, ".docx") Тогда
			ТипФайла = "docx";
		КонецЕсли;

		ФайлDocx = _Поделка.НайтиЖелудь(ТипФайла);
		Если ФайлDocx = Неопределено Тогда
			НеизвестныеТипыФайлов.Добавить(ИмяФайлаШаблона);
			Продолжить;
		КонецЕсли;

		ФайлDocx.УстановитьПутьКФайлуШаблона(ПутьКФайлуШаблона);
		ФайлDocx.УстановитьПутьКФайлуРаспакованный(ПутьРаспакованный);
		ФайлDocx.УстановитьИмяФайлаШаблона(ИмяФайлаШаблона);
		ФайлDocx.УстановитьИмяФайла(ИмяВыходногоФайла);
		_ФайлыDocx.Добавить(ФайлDocx);
		
		Чтение = Новый ЧтениеZipФайла(ПутьКФайлуШаблона);
		Чтение.ИзвлечьВсе(ПутьРаспакованный, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		Чтение.Закрыть();

		РаспакованныеШаблоны.Добавить(ИмяФайлаШаблона);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьФайлы() Экспорт

	Для каждого ФайлDocx Из _ФайлыDocx Цикл
		ФайлDocx.ЗаполнитьФайл();
	КонецЦикла;

КонецПроцедуры

Процедура СохранитьВВыходнойКаталог() Экспорт

	КаталогСохранения = ОбъединитьПути(ТекущийКаталог(), _Настройки.КаталогСохранения());
	СоздатьКаталог(КаталогСохранения);
	КаталогВременныхФайлов = ОбъединитьПути(ТекущийКаталог(), _Настройки.КаталогВременныхФайлов());

	Для каждого Настройка Из _НастройкиПодстановки Цикл
		
		ИмяВыходногоФайла = Настройка.Получить("ИмяВыходногоФайла");
		ПолноеИмяВыходногоФайла = ОбъединитьПути(КаталогСохранения, ИмяВыходногоФайла);
		КаталогРаспакованногоШаблона = ОбъединитьПути(КаталогВременныхФайлов, Настройка.Получить("ИмяФайлаШаблона"));

		Архив = Новый ЗаписьZipФайла(ПолноеИмяВыходногоФайла);
		Архив.Добавить(ОбъединитьПути(КаталогРаспакованногоШаблона, "*.*"),
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		Архив.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьНастройкиПодстановки() Экспорт

	ФайлНастроекПодстановки = _Настройки.ПутьКФайлуНастройкиПодстановки();
	
	ЧтениеЖсон = Новый ЧтениеJSON();
	ЧтениеЖсон.ОткрытьФайл(ФайлНастроекПодстановки);
	_НастройкиПодстановки = ПрочитатьJSON(ЧтениеЖсон, Истина);
	ЧтениеЖсон.Закрыть();

КонецПроцедуры

Функция НастройкиПодстановки() Экспорт
	Возврат _НастройкиПодстановки;
КонецФункции
